{"version":3,"sources":["Button/Button.module.css","Button/Button.tsx","Redux/Counter-reducer.tsx","Redux/selectors.tsx","CounterContainer/CounterModule/Counter.tsx","CounterContainer/CounterSettings/CounterSettings.tsx","App.tsx","reportWebVitals.ts","Redux/Redux-store.tsx","utils/localStorage.tsx","index.tsx","CounterContainer/CounterSettings/CounterSetting.module.css","CounterContainer/CounterModule/Counter.module.css"],"names":["module","exports","Button","props","className","style","btns","onClick","onclick","disabled","name","InitialState","buttonNames","counterValue","minValue","maxValue","errorDisplayed","errorMessage","incorrect","correct","actions","type","selectorCounter","state","counter","Counter","useSelector","dispatch","useDispatch","disabledDelBtn","length","counterBox","errorValue","counterBtnsBlock","CounterSettings","useState","disableBtn","setDisableBtn","onInputChange","e","valueE","currentTarget","value","dataset","settingBox","valuesBox","changeValueBoxes","bgRed","onChange","data-name","settingButton","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0HACAA,EAAOC,QAAU,CAAC,KAAO,uB,2KCQZC,EAA+B,SAACC,GACzC,OAAO,wBAAQC,UAAWC,IAAMC,KACjBC,QAASJ,EAAMK,QACfC,SAAUN,EAAMM,SAFxB,SAGLN,EAAMO,Q,cCVCC,EAAe,CACxBC,YAAa,CAAC,MAAO,MAAO,OAC5BC,aAAc,EACdC,SAAU,EACVC,SAAU,EACVC,eAAgB,GAChBC,aAAc,CACVC,UAAW,kBACXC,QAAS,oCAqDJC,EACM,iBAAO,CAACC,KAAM,mBADpBD,EAEG,iBAAO,CAACC,KAAM,gBAFjBD,EAGD,SAACL,GAAD,MAAuB,CAACM,KAAM,UAAWN,aAHxCK,EAID,SAACN,GAAD,MAAuB,CAACO,KAAM,UAAWP,aAJxCM,EAKK,iBAAO,CAACC,KAAM,kBClEnBC,EAAkB,SAACC,GAC5B,OAAOA,EAAMC,SCGJC,EAAoB,WAAO,IAAD,EAQ/BC,YAAYJ,GANZN,EAF+B,EAE/BA,eACAH,EAH+B,EAG/BA,aACAD,EAJ+B,EAI/BA,YACAE,EAL+B,EAK/BA,SACAC,EAN+B,EAM/BA,SACeG,EAPgB,EAO/BD,aAAeC,UAGbS,EAAWC,cAEXC,EAAiBhB,IAAiBC,GAAYE,EAAec,OAAS,EAC5E,OACI,sBAAK1B,UAAWC,IAAM0B,WAAtB,UACI,qBAAK3B,UAAWC,IAAMQ,aAAtB,SACI,sBAAMT,UAAS,UAAKW,IAAaF,GAAgBG,IAAmBE,EAAYb,IAAM2B,WAAa,IAAnG,SACKhB,EAAec,OAAS,EAAId,EAAiBH,MAGtD,sBAAKT,UAAWC,IAAM4B,iBAAtB,UACI,cAAC,EAAD,CAAQzB,QAAS,kBAAMmB,EAASP,MAA0BV,KAAME,EAAY,GAAIH,SAAUM,IAAYF,GAAgBG,EAAec,OAAS,IAC9I,cAAC,EAAD,CAAQtB,QAAS,kBAAMmB,EAASP,MAAuBV,KAAME,EAAY,GAAIH,SAAUoB,W,wBCtB1FK,EAA4B,WAAO,IAAD,EAOvCR,YAAYJ,GALZV,EAFuC,EAEvCA,YACAE,EAHuC,EAGvCA,SACAC,EAJuC,EAIvCA,SACAC,EALuC,EAKvCA,eACeE,EANwB,EAMvCD,aAAeC,UAGbS,EAAWC,cAT0B,EAWPO,oBAAS,GAXF,mBAWpCC,EAXoC,KAWxBC,EAXwB,KAarCC,EAAgB,SAACC,GACnB,IAAIC,GAAUD,EAAEE,cAAcC,MACO,QAAjCH,EAAEE,cAAcE,QAAQjC,OACxBiB,EAASP,EAAeoB,IAEpBH,IADAG,EAAS1B,GAAY0B,IAAW1B,GAAY0B,EAAS,KAMxB,QAAjCD,EAAEE,cAAcE,QAAQjC,OACxBiB,EAASP,EAAeoB,IAEpBH,IADAG,EAASzB,GAAYyB,IAAWzB,GAAYyB,GAAU,MAYlE,OACI,sBAAKpC,UAAWC,IAAMuC,WAAtB,UACI,sBAAKxC,UAAWC,IAAMwC,UAAtB,UACI,sBAAKzC,UAAWC,IAAMyC,iBAAtB,UACI,4CACA,uBAAO1C,UAAWY,IAAmBE,EAAYb,IAAM0C,MAAQ,GACxD1B,KAAK,SACL2B,SAAU,SAAAT,GAAC,OAAID,EAAcC,IAC7BG,MAAO3B,EACPkC,YAAU,WAIrB,sBAAK7C,UAAWC,IAAMyC,iBAAtB,UACI,4CACA,uBAAO1C,UAAWY,IAAmBE,EAAYb,IAAM0C,MAAQ,GACxD1B,KAAK,SACL2B,SAAU,SAAAT,GAAC,OAAID,EAAcC,IAC7BG,MAAO5B,EACPmC,YAAU,cAIzB,qBAAK7C,UAAWC,IAAM6C,cAAtB,SACI,cAAC,EAAD,CAAQ1C,QA7BC,WACjBmB,EAASP,KACTiB,GAAc,IA2ByB3B,KAAME,EAAY,GAAIH,SAAU2B,UCpDhEe,MAXf,WACI,OACI,qBAAK/C,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,UCIDgD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,eCDRQ,EAAcC,YAAgB,CAChCtC,QNK0B,WAAoE,IAAnED,EAAkE,uDAAxCZ,EAAcoD,EAA0B,uCAC7F,OAAQA,EAAO1C,MACX,IAAK,iBACD,OAAIE,EAAMV,aAAeU,EAAMR,SACpB,2BAAIQ,GAAX,IAAkBV,aAAcU,EAAMV,aAAe,IAE9CU,EAGf,IAAK,cACD,OAAO,2BACAA,GADP,IACcV,aAAcU,EAAMT,WAEtC,IAAK,UACD,OAAIiD,EAAOhD,UAAYQ,EAAMT,SAClB,2BACAS,GADP,IAEIR,SAAUgD,EAAOhD,SACjBC,eAAgBO,EAAMN,aAAaC,YAEpC,2BACAK,GADA,IAEHR,SAAUgD,EAAOhD,SACjBC,eAAgBO,EAAMN,aAAaE,UAG3C,IAAK,UACD,OAAI4C,EAAOjD,UAAYS,EAAMR,UAAYgD,EAAOjD,SAAW,EAChD,2BACAS,GADP,IAEIT,SAAUiD,EAAOjD,SACjBE,eAAgBO,EAAMN,aAAaC,YAEpC,2BACAK,GADA,IAEHT,SAAUiD,EAAOjD,SACjBE,eAAgBO,EAAMN,aAAaE,UAG3C,IAAK,gBACD,OAAO,2BACAI,GADP,IAEIV,aAAcU,EAAMT,SACpBE,eAAgB,KAG5B,OAAOO,KM9CEyC,EAAQC,YAAYJ,ECHR,WACrB,IACI,IAAMK,EAAkBC,aAAaC,QAAQ,SAC7C,GAAwB,OAApBF,EACA,OAEJ,OAAOG,KAAKC,MAAMJ,GACpB,MAAOK,GACL,QDLsCC,GAAaC,YAAgBC,MAC3EV,EAAMW,WAAU,YCbS,SAACpD,GACtB,IACI,IAAM2C,EAAkBG,KAAKO,UAAUrD,GACvC4C,aAAaU,QAAQ,QAASX,GAChC,WDUFY,CAAU,CACNtD,QAASwC,EAAMe,WAAWvD,aETlCwD,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUlB,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRmB,SAASC,eAAe,SAM1BhC,K,kBCnBApD,EAAOC,QAAU,CAAC,WAAa,mCAAmC,UAAY,kCAAkC,cAAgB,sCAAsC,iBAAmB,yCAAyC,MAAQ,gC,kBCA1OD,EAAOC,QAAU,CAAC,WAAa,4BAA4B,aAAe,8BAA8B,iBAAmB,kCAAkC,WAAa,4BAA4B,MAAQ,0B","file":"static/js/main.0f1a2dd8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btns\":\"Button_btns__19bcr\"};","import React from \"react\";\nimport style from \"./Button.module.css\"\n\ntype ButtonType = {\n    onclick?: () => void\n    name?: string\n    disabled?: boolean\n}\n\nexport const Button: React.FC<ButtonType> = (props) => {\n    return <button className={style.btns}\n                   onClick={props.onclick}\n                   disabled={props.disabled}\n    >{props.name}\n    </button>\n}","import {InferValueType} from \"./Redux-store\";\n\nexport type InitialStateType = typeof InitialState\nexport const InitialState = {\n    buttonNames: ['inc', 'del', 'set'],\n    counterValue: 0,\n    minValue: 0,\n    maxValue: 5,\n    errorDisplayed: '',\n    errorMessage: {\n        incorrect: 'Incorrect value',\n        correct: 'Set the settings and click save'\n    }\n}\nexport const CounterReducer = (state: InitialStateType = InitialState, action: CounterAcType) => {\n    switch (action.type) {\n        case \"INCREASE_VALUE\": {\n            if (state.counterValue < state.maxValue) {\n                return {...state, counterValue: state.counterValue + 1}\n            } else {\n                return state\n            }\n        }\n        case \"ERASE_VALUE\":\n            return {\n                ...state, counterValue: state.minValue\n            }\n        case \"SET_MAX\": {\n            if (action.maxValue <= state.minValue) {\n                return {\n                    ...state,\n                    maxValue: action.maxValue,\n                    errorDisplayed: state.errorMessage.incorrect\n                }\n            } else return {\n                ...state,\n                maxValue: action.maxValue,\n                errorDisplayed: state.errorMessage.correct,\n            }\n        }\n        case \"SET_MIN\": {\n            if (action.minValue >= state.maxValue || action.minValue < 0) {\n                return {\n                    ...state,\n                    minValue: action.minValue,\n                    errorDisplayed: state.errorMessage.incorrect\n                }\n            } else return {\n                ...state,\n                minValue: action.minValue,\n                errorDisplayed: state.errorMessage.correct,\n            }\n        }\n        case \"SAVE_SETTINGS\":\n            return {\n                ...state,\n                counterValue: state.minValue,\n                errorDisplayed: ''\n            }\n    }\n    return state\n}\n\nexport type CounterAcType = InferValueType<typeof actions>\nexport const actions = {\n    increaseValue: () => ({type: 'INCREASE_VALUE'} as const),\n    eraseValue: () => ({type: 'ERASE_VALUE'} as const),\n    setMax: (maxValue: number) => ({type: 'SET_MAX', maxValue} as const),\n    setMin: (minValue: number) => ({type: 'SET_MIN', minValue} as const),\n    saveSettings: () => ({type: 'SAVE_SETTINGS'} as const),\n}","import {RootState} from \"./Redux-store\";\nimport {InitialStateType} from \"./Counter-reducer\";\n\nexport const selectorCounter = (state : RootState): InitialStateType => {\n    return state.counter\n\n}","import React, {Dispatch} from \"react\";\nimport style from \"./Counter.module.css\"\nimport {Button} from \"../../Button/Button\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {actions, CounterAcType} from \"../../Redux/Counter-reducer\";\nimport {selectorCounter} from \"../../Redux/selectors\";\n\nexport const Counter: React.FC = () => {\n    const {\n        errorDisplayed,\n        counterValue,\n        buttonNames,\n        minValue,\n        maxValue,\n        errorMessage: {incorrect}\n    } = useSelector(selectorCounter)\n\n    const dispatch = useDispatch<Dispatch<CounterAcType>>()\n\n    const disabledDelBtn = counterValue === minValue || errorDisplayed.length > 0\n    return (\n        <div className={style.counterBox}>\n            <div className={style.counterValue}>\n                <span className={`${maxValue === counterValue || errorDisplayed === incorrect ? style.errorValue : ''}`}>\n                    {errorDisplayed.length > 0 ? errorDisplayed : counterValue}\n                </span>\n            </div>\n            <div className={style.counterBtnsBlock}>\n                <Button onclick={() => dispatch(actions.increaseValue())} name={buttonNames[0]} disabled={maxValue=== counterValue || errorDisplayed.length > 0}/>\n                <Button onclick={() => dispatch(actions.eraseValue())} name={buttonNames[1]} disabled={disabledDelBtn}/>\n            </div>\n        </div>\n    )\n}","import React, {Dispatch, useState} from \"react\";\nimport {Button} from \"../../Button/Button\";\nimport style from \"./CounterSetting.module.css\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {actions, CounterAcType} from \"../../Redux/Counter-reducer\";\nimport {selectorCounter} from \"../../Redux/selectors\";\n\nexport const CounterSettings: React.FC = () => {\n    const {\n        buttonNames,\n        minValue,\n        maxValue,\n        errorDisplayed,\n        errorMessage: {incorrect}\n    } = useSelector(selectorCounter)\n\n    const dispatch = useDispatch<Dispatch<CounterAcType>>()\n\n    const [disableBtn, setDisableBtn] = useState(true)\n\n    const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let valueE = +e.currentTarget.value\n        if (e.currentTarget.dataset.name === 'max') {\n            dispatch(actions.setMax(valueE))\n            if (valueE > minValue && valueE !== minValue && valueE > 0) {\n                setDisableBtn(false)\n            } else {\n                setDisableBtn(true)\n            }\n        }\n        if (e.currentTarget.dataset.name === 'min') {\n            dispatch(actions.setMin(valueE))\n            if (valueE < maxValue && valueE !== maxValue && valueE >= 0) {\n                setDisableBtn(false)\n            } else {\n                setDisableBtn(true)\n            }\n        }\n    }\n    const onSaveButton = () => {\n        dispatch(actions.saveSettings())\n        setDisableBtn(true)\n    }\n\n    return (\n        <div className={style.settingBox}>\n            <div className={style.valuesBox}>\n                <div className={style.changeValueBoxes}>\n                    <p>max value: </p>\n                    <input className={errorDisplayed === incorrect ? style.bgRed : ''}\n                           type='number'\n                           onChange={e => onInputChange(e)}\n                           value={maxValue}\n                           data-name='max'\n                    />\n\n                </div>\n                <div className={style.changeValueBoxes}>\n                    <p>min value: </p>\n                    <input className={errorDisplayed === incorrect ? style.bgRed : ''}\n                           type='number'\n                           onChange={e => onInputChange(e)}\n                           value={minValue}\n                           data-name='min'\n                    />\n                </div>\n            </div>\n            <div className={style.settingButton}>\n                <Button onclick={onSaveButton} name={buttonNames[2]} disabled={disableBtn}/>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport {Counter} from \"./CounterContainer/CounterModule/Counter\";\nimport {CounterSettings} from \"./CounterContainer/CounterSettings/CounterSettings\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Counter/>\n                <CounterSettings/>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore, applyMiddleware} from 'redux';\nimport {CounterReducer} from \"./Counter-reducer\";\nimport {loadState, saveState} from \"../utils/localStorage\";\nimport thunk from 'redux-thunk';\n\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nconst rootReducer = combineReducers({\n    counter: CounterReducer,\n})\n\nexport type InferValueType<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never\n\nexport const store = createStore(rootReducer, loadState(), applyMiddleware(thunk))\nstore.subscribe(() => {\n    saveState({\n        counter: store.getState().counter\n    });\n});","import {RootState} from \"../Redux/Redux-store\";\n\nexport const saveState = (state: RootState) => {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('state', serializedState);\n    } catch {\n        // ignore write errors\n    }\n};\n\nexport const loadState = () => {\n    try {\n        const serializedState = localStorage.getItem('state');\n        if (serializedState === null) {\n            return undefined;\n        }\n        return JSON.parse(serializedState);\n    } catch (err) {\n        return undefined;\n    }\n};\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Redux/Redux-store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingBox\":\"CounterSetting_settingBox__11lfu\",\"valuesBox\":\"CounterSetting_valuesBox__29n9U\",\"settingButton\":\"CounterSetting_settingButton__tQ6nM\",\"changeValueBoxes\":\"CounterSetting_changeValueBoxes__2Ky1_\",\"bgRed\":\"CounterSetting_bgRed__1fDUF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterBox\":\"Counter_counterBox__2iF4r\",\"counterValue\":\"Counter_counterValue__1T9RR\",\"counterBtnsBlock\":\"Counter_counterBtnsBlock__22aM-\",\"errorValue\":\"Counter_errorValue__2IS-j\",\"blink\":\"Counter_blink__1gDzk\"};"],"sourceRoot":""}